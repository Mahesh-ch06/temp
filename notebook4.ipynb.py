# -*- coding: utf-8 -*-
"""Lab2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qeAiAhiAPeqaZshlq59DzVOq5ggqte9q
"""

import numpy as np
data = [12, 45, 67, 23, 45, 89, 45, 12, 33, 67, 67, 78, 45, 23, 23, 56, 89, 45, 33, 45]
# Median Calculation
median = np.median(data)

# Mode Calculation
mode = max(data, key=data.count)

print(f"Median (NumPy): {median}")
print(f"Mode (NumPy): {mode}")

import pandas as pd
data = [12, 45, 67, 23, 45, 89, 45, 12, 33, 67, 67, 78, 45, 23, 23, 56, 89, 45, 33, 45]
# Median Calculation
median = pd.Series(data).median()

# Mode Calculation
mode = pd.Series(data).mode()

print(f"Median (Pandas): {median}")
print(f"Mode (Pandas): {mode.values}")

import numpy as np

# Scores and frequencies
scores = [10, 20, 30, 40, 50]
frequencies = [5, 8, 12, 15, 7]

# Create a dataset based on scores and frequencies
data = []
for score, freq in zip(scores, frequencies):
    data.extend([score] * freq)

# Median Calculation
median = np.median(data)

# Mode Calculation
mode = max(data, key=data.count)

print(f"Median (NumPy): {median}")
print(f"Mode (NumPy): {mode}")

import pandas as pd

# Scores and frequencies
scores = [10, 20, 30, 40, 50]
frequencies = [5, 8, 12, 15, 7]

# Create a dataset based on scores and frequencies
data = []
for score, freq in zip(scores, frequencies):
    data.extend([score] * freq)

# Convert to Pandas Series
data_series = pd.Series(data)

# Median Calculation
median = data_series.median()

# Mode Calculation
mode = data_series.mode()

print(f"Median (Pandas): {median}")
print(f"Mode (Pandas): {mode.values}")

import numpy as np

# Class intervals and frequencies
class_intervals = [(0, 10), (10, 20), (20, 30), (30, 40), (40, 50)]
frequencies = [4, 6, 10, 8, 2]

# Calculate class midpoints
midpoints = [(interval[0] + interval[1]) / 2 for interval in class_intervals]

# Create a dataset based on midpoints and frequencies
data = []
for midpoint, freq in zip(midpoints, frequencies):
    data.extend([midpoint] * freq)

# Median Calculation
median = np.median(data)

# Mode Calculation
mode = max(data, key=data.count)

print(f"Median (NumPy): {median}")
print(f"Mode (NumPy): {mode}")

import pandas as pd

# Class intervals and frequencies
class_intervals = [(0, 10), (10, 20), (20, 30), (30, 40), (40, 50)]
frequencies = [4, 6, 10, 8, 2]

# Create a DataFrame for the grouped data
df = pd.DataFrame({
    "Class Interval": class_intervals,
    "Frequency": frequencies
})

# Calculate class midpoints and add to DataFrame
df["Midpoint"] = [(interval[0] + interval[1]) / 2 for interval in class_intervals]

# Calculate cumulative frequencies
df["Cumulative Frequency"] = df["Frequency"].cumsum()

# Calculate total frequency and dataset size
total_frequency = df["Frequency"].sum()
half_total = total_frequency / 2

# Determine the median class
median_class_index = df[df["Cumulative Frequency"] >= half_total].index[0]
median_class = df.iloc[median_class_index]

# Median calculation using the grouped data formula:
# Median = L + [(N/2 - CF_prev) / f] * h
L = median_class["Class Interval"][0]  # Lower boundary of median class
f = median_class["Frequency"]  # Frequency of median class
CF_prev = df.iloc[median_class_index - 1]["Cumulative Frequency"] if median_class_index > 0 else 0  # Cumulative frequency before median class
h = median_class["Class Interval"][1] - median_class["Class Interval"][0]  # Class width

median = L + ((half_total - CF_prev) / f) * h

# Mode calculation using the grouped data formula:
# Mode = L + [(f1 - f0) / (2*f1 - f0 - f2)] * h
f1 = median_class["Frequency"]  # Frequency of mode class
f0 = df.iloc[median_class_index - 1]["Frequency"] if median_class_index > 0 else 0  # Frequency of previous class
f2 = df.iloc[median_class_index + 1]["Frequency"] if median_class_index + 1 < len(df) else 0  # Frequency of next class

mode = L + ((f1 - f0) / (2 * f1 - f0 - f2)) * h

# Print the results
print("DataFrame:")
print(df)
print(f"\nMedian (Grouped Data Formula): {median}")
print(f"Mode (Grouped Data Formula): {mode}")